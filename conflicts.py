# -*- coding: utf-8 -*-
"""Conflicts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VLxBjB_feXKf5Et1mHf7lC8VLav7KS-L
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta

# Load billing data from the CSV URL
billing_url = "https://docs.google.com/spreadsheets/d/192nbhNcK3m6OrtwkXvB_CTKCZcx_If3fxKvKJwbFHhA/export?format=csv"
billing_data = pd.read_csv(billing_url)

# Load conflicts data from the CSV URL
conflicts_url = "https://docs.google.com/spreadsheets/d/1-PeDSnct_lj4SvtOfGYlAdXa8vLQGvBMX-I5vi-1Y9k/export?format=csv"
conflicts_data = pd.read_csv(conflicts_url)

# Streamlit UI
st.set_page_config(page_title="Competitive Conflict Checker", page_icon=":guardsman:", layout="wide")
st.title("Competitive Conflict Checker")

# User inputs
person_name = st.text_input("Enter the employee's name:")
client_to_check = st.text_input("Enter the client/brand to check:")

# Convert "EnteredOn" column to datetime format
billing_data["EnteredOn"] = pd.to_datetime(billing_data["EnteredOn"])

# Calculate date range (last 6 months from the latest entry in the billing data)
end_date = billing_data["EnteredOn"].max()  # Latest date in the billing data
start_date = end_date - timedelta(days=180)  # 6 months prior to the latest date

# Filter billing data for the person and date range
filtered_data = billing_data[(billing_data["Employee Name"] == person_name) & 
                             (billing_data["EnteredOn"] >= start_date) & 
                             (billing_data["EnteredOn"] <= end_date)]

# Conflicts data structure: Check if the client in billing matches any competitor in the conflicts data
conflicting_brands = []

# Loop through the conflicts data to find any conflicts based on Company Name and Competitive Companies
for _, row in conflicts_data.iterrows():
    if row["Company A"] == client_to_check or row["Company B"] == client_to_check:
        conflicting_brands.extend([row["Competitive Companies"], row["Brands"]])

# Remove duplicates in conflicting brands list
conflicting_brands = list(set(conflicting_brands))

# Check for conflicts in filtered billing data
conflicts = filtered_data[filtered_data["Company Name"].isin(conflicting_brands)]

# Output results
st.subheader("Billing History for the Last 6 Months:")
st.write(filtered_data)

if not conflicts.empty:
    st.subheader("Competitive Conflicts Found:")
    st.write(conflicts)
else:
    st.write("No competitive conflicts found.")
